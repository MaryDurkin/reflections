Git uses a 'staging area' to hold files before committing
The three conceptual areas are: working directory, staging area and repository

git add <file> to add files to the staging area

git rm --cached <file> to remove them

Staging area is different because it assembles files before making a committ. Gives a moment to pause to make sure all and only the files in the logical stage are added


git diff    with no arguements compares the files in the staging area with those in the working directory
git diff --staged 	compares those in the staging area with the most recent commit in the repository.
git diff comit_id_old commit_id_newer compares different commits

git reset --hard  discards changes in the working directory or the staging area USE WITH CAUTION


git commit  makes a commit of the staging area to the repository

git branch (with no arguments) shows the branch you are on

git branch branch-name - creates a branch called, you guessed it branch name

git checkout branch-name - checks  out the branch branch-name

So perhaps use branches when you are just seeing how things might look, need a different version or hav't decided to implement thr changes

If several people are working on the same project make branches to sign out branches (for bug fix, for adding features etc.) When each section is complete merge them back together again

remote branch - a branch created by others. Once you check out a remote branch it behaves just like a branch you created yourself

git log --graph --oneline branch1 branch2 (--online makes output a little easier to read)

Be careful with brances as log reaches parent (grandparent etc) of current commit. Remember branch names do that nodes don't become unreachable

git checkout -b new_branch_name (when you have a detached HEAD and want to turn it into a branch) it is the equivalent of;

git branch new_branch_name
git checkout new_branch_name


Merging Branches:

from the master branch..

git merge master coins (will merge coins into master)


The merged commmit has two parents. In this case it becomes the new tip of the master branch Once they are merged the LABEL of the junior merge partner is discarded. Old version of comits on that branch can still be reach but it is not considered a branch. Commits will be listed by timestamp


git show <commit id #> show the difference between the commit and it's parent, without having to know the id of the parent.

Q: how to list all the branches that a repository has?
git branch

git branch -d branch-name (deletes the LABEL of the branch, but not the commits)

Merge conflict: when different branches are not enirely compatable what's a git to do?
Does not merge the areas but brings the conflict to your attention do you can decide and fix it

when merging - the branch you are in is important:

eg in branch easy-mode
git merge master easy-mode      will create a new head on easy-node

but in branch master
git merge  master easy-mode  will create a new head in master

So sometimes autoatic merges are better (if you have been working on separate areas)
Sometime manual is better - fewer bug introduced?



